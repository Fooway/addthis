<?php

/**
 * Implements hook_theme().
 */
function addthis_theme() {
  return array(
    'addthis_wrapper' => array(
      'render element' => 'element',
    ),
    'addthis_element' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * @TODO Find another way to do this since it breaks aggregation.
 * @param array $page
 */
function addthis_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'addthis/addthis.global';
}


function addthis_library_info_alter() {

}


/**
 * Implementation to retrieve formatters for a given type of field.
 */
function _addthis_field_info_formatter_field_type($field_type = NULL) {
  $formatters = \Drupal::Service('plugin.manager.field.formatter')
    ->getDefinitions();
  foreach ($formatters as $key => $formatter) {
    if (!in_array((!isset($field_type) ? 'addthis' : $field_type), $formatter['field_types'])) {
      unset($formatters[$key]);
    }
  }
  return $formatters;
}


/**
 * Validation for services for BasicToolbox.
 * @param array $element
 * @param FormStateInterface $form_state
 */
function addThisDisplayElementServicesValidate(array $element, FormStateInterface $form_state) {
  $bad = FALSE;

  $services = trim($element['#value']);
  $services = str_replace(' ', '', $services);

  if (!preg_match('/^[a-z\_\,0-9]+$/', $services)) {
    $bad = TRUE;
  }
  // @todo Validate the service names against AddThis.com. Give a notice when there are bad names.

  // Return error.
  if ($bad) {
    form_error($element, t('The declared services are incorrect or nonexistent.'));
  }
}

